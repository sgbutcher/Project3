// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Project3.Data;
using System;

namespace Project3.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180527020116_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Project3.Models.Advisor", b =>
                {
                    b.Property<int>("AdvisorID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.HasKey("AdvisorID");

                    b.ToTable("Advisor");
                });

            modelBuilder.Entity("Project3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Project3.Models.Bedaprogram", b =>
                {
                    b.Property<int>("BedaprogramID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("BedaprogramID");

                    b.ToTable("Bedaprogram");
                });

            modelBuilder.Entity("Project3.Models.Enrolled", b =>
                {
                    b.Property<int>("EnrolledID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("QuarterID");

                    b.Property<int>("StudentID");

                    b.HasKey("EnrolledID");

                    b.HasIndex("QuarterID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrolled");
                });

            modelBuilder.Entity("Project3.Models.Goal", b =>
                {
                    b.Property<int>("GoalID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("GoalID");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("Project3.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.HasKey("InstructorID");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("Project3.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("LocationID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Project3.Models.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdvisorID");

                    b.Property<string>("Body");

                    b.Property<int>("StudentID");

                    b.HasKey("NoteID");

                    b.HasIndex("AdvisorID");

                    b.HasIndex("StudentID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Project3.Models.Quarter", b =>
                {
                    b.Property<int>("QuarterID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.HasKey("QuarterID");

                    b.ToTable("Quarter");
                });

            modelBuilder.Entity("Project3.Models.Quarterlyenrollment", b =>
                {
                    b.Property<int>("QuarterlyenrollmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CCCreditsEarned");

                    b.Property<string>("CatalogListing");

                    b.Property<string>("CourseCode");

                    b.Property<string>("CourseDescription");

                    b.Property<int>("CreditsEarned");

                    b.Property<string>("GradeEarned");

                    b.Property<int>("HS21CreditsEarned");

                    b.Property<int>("InstructorID");

                    b.Property<int>("QuarterID");

                    b.Property<int>("StudentID");

                    b.Property<string>("SubjectGroup");

                    b.HasKey("QuarterlyenrollmentID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("QuarterID");

                    b.HasIndex("StudentID");

                    b.ToTable("Quarterlyenrollment");
                });

            modelBuilder.Entity("Project3.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdvisorID");

                    b.Property<int>("BedaprogramID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("GoalID");

                    b.Property<DateTime>("Intake");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("LocationID");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("Registration");

                    b.Property<string>("SID")
                        .IsRequired();

                    b.HasKey("StudentID");

                    b.HasIndex("AdvisorID");

                    b.HasIndex("BedaprogramID");

                    b.HasIndex("GoalID");

                    b.HasIndex("LocationID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project3.Models.Enrolled", b =>
                {
                    b.HasOne("Project3.Models.Quarter", "Quarter")
                        .WithMany()
                        .HasForeignKey("QuarterID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.Student", "Student")
                        .WithMany("EnrolledQuarters")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project3.Models.Note", b =>
                {
                    b.HasOne("Project3.Models.Advisor", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.Student", "Student")
                        .WithMany("Notes")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project3.Models.Quarterlyenrollment", b =>
                {
                    b.HasOne("Project3.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.Quarter", "Quarter")
                        .WithMany()
                        .HasForeignKey("QuarterID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.Student", "Student")
                        .WithMany("Quarterlyenrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project3.Models.Student", b =>
                {
                    b.HasOne("Project3.Models.Advisor", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.Bedaprogram", "Bedaprogram")
                        .WithMany()
                        .HasForeignKey("BedaprogramID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project3.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
